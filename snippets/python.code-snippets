{
  "Manifest": {
    "prefix": [
      "o",
      "manifest",
    ],
    "body": [
      "# -*- coding: utf-8 -*-",
      "{",
      "   \"name\": \"Module Name\",",
      "   \"name_vi_VN\": \"\",",
      "   \"summary\": \"Summary\",",
      "   \"description\": \"Description\",",
      "   \"author\": \"Bùi Đức Tuấn\",",
      "   \"maintainer\": \"Bùi Đức Tuấn\",",
      "   \"license\": \"OPL-1\",",
      "   \"website\": \"https://xyz.com.vn\",",
      "   \"category\": \"Tim/Management\",",
      "   \"version\": \"17.0.1.0.1\",",
      "   \"depends\": [],",
      "   \"installable\": True,",
      "   \"application': False,",
      "   'auto_install': False,",
      "   'price': 0,",
      "   'currency': 'USD',",
      "   'data': [",
      "   #============================================================================================================",
      "   # DATA",
      "",
      "   #============================================================================================================",
      "   # GROUP - SECURITY SETTING - PROFILE",
      "",
      "   #============================================================================================================",
      "   # WIZARD",
      "   #============================================================================================================",
      "   # VIEWS",
      "",
      "   #============================================================================================================",
      "   # REPORT",
      "",
      "   #============================================================================================================",
      "   # MENU - ACTION",
      "",
      "   #============================================================================================================",
      "   # FUNCTION USE TO UPDATE DATA LIKE POST OBJECT",
      "   #============================================================================================================",
      "],",
      "   'pre_init_hook': None,",
      "   'post_init_hook': None,",
      "   'uninstall_hook': None,",
      "   'external_dependencies': {'python': []},",
      "   'assets': {",
      "       'web.assets_backend': [],",
      "       'web.assets_common': [],",
      "       'web.qunit_suite_tests': [],",
      "    }",
      "}"
    ]
  },
  "Init": {
    "prefix": [
      "o",
      "init",
    ],
    "body": [
      "# -*- coding: utf-8 -*-",
      "from . import models",
      "from . import controllers"
    ]
  },
  "Model class": {
    "prefix": [
      "class",
      "model"
    ],
    "body": [
      "# -*- coding: utf-8 -*-",
      "# 1 : imports of python lib",
      "# 2 : imports of odoo",
      "import odoo",
      "from odoo import api, fields, models, _",
      "# 3 : imports from odoo addons",
      "class ${0: MyClass}(models.Model):",
      "    _inherit = \"my.class\"",
      "    _name = \"my.class\"",
      "    _description = \"My Class\"",
      "    _auto= True",
    ]
  },
  "Transient class": {
    "prefix": [
      "transient",
      "class",
      "model"
    ],
    "body": [
      "# -*- coding: utf-8 -*-",
      "# 1 : imports of python lib",
      "import base64",
      "import re",
      "import time",
      "from datetime import datetime",
      "# 2 : imports of odoo",
      "import odoo",
      "from odoo import api, fields, models, _ ",
      "# 3 : imports from odoo addons",
      "class ${0: MyClass}(models.TransientModel):",
      "    _inherit = \"my.class\"",
      "    _name = \"my.class\"",
      "    _description = \"My Class\"",
      "    _transient_max_hours = 1.0",
      "    _transient_max_count = 0",
    ]
  },
  "Odoo AbtractClass": {
    "prefix": [
      "abtract",
      "class",
      "model"
    ],
    "body": [
      "# -*- coding: utf-8 -*-",
      "# 1 : imports of python lib",
      "# 2 : imports of odoo",
      "import odoo",
      "from odoo import api, fields, models, _",
      "# 3 : imports from odoo addons",
      "class ${0: MyClass}(models.AbstractModel):",
      "    _inherit = 'my.class'",
      "    _name = 'my.class'",
      "    _description = 'My Class'"
    ]
  },
  "Create function": {
    "prefix": [
      "create",
      "orm",
      "def"
    ],
    "body": [
      "@api.model",
      "def create(self,vals):",
      "    return super().create(vals)"
    ]
  },
  "Write function": {
    "prefix": [
      "write",
      "orm",
      "def"
    ],
    "body": [
      "@api.model",
      "def write(self,vals):",
      "    return super().write(vals)"
    ]
  },
  "Unlink function": {
    "prefix": [
      "unlink",
      "def",
      "orm",
    ],
    "body": [
      "@api.model",
      "def unlink(self):",
      "    return super().unlink()"
    ]
  },
  "Compute display name function": {
    "prefix": [
      "compute",
      "display-name",
      "def",
    ],
    "body": [
      "@api.depends(\"name\")",
      "def _compute_display_name(self):",
      "    for record in self:",
      "        record.display_name = \"Tứng thợ code\""
    ]
  },
  "Depends decoration": {
    "prefix": [
      "depends",
      "@api",
      "compute",
      "def",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Char(",
      "         string=\"$TM_CURRENT_WORD\",",
      "         compute=\"_compute_$TM_CURRENT_WORD\"",
      ")",
      "@api.depends(\"name\")",
      "def _compute_$TM_CURRENT_WORD(self):",
      "    for record in self:",
      "        record.$TM_CURRENT_WORD =  record.name"
    ]
  },
  "Onchange decoration": {
    "prefix": [
      "onchange",
      "@api",
      "def",
    ],
    "body": [
      "@api.onchange(\"$TM_CURRENT_WORD\")",
      "def _onchange_$TM_CURRENT_WORD(self):",
      "    for record in self:",
      "        record.bar =  record.$TM_CURRENT_WORD"
    ]
  },
  "Char field": {
    "prefix": [
      "char",
      "field",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Char(",
      "      string=\"$TM_CURRENT_WORD\",",
      "      default=\"Foo\",",
      "      required=False,",
      "      readonly=False,",
      "      copy=False,",
      ")",
    ]
  },
  "Boolean field": {
    "prefix": [
      "boolean",
      "field"
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Boolean(",
      "    string=\"$TM_CURRENT_WORD\",",
      ")",
    ]
  },
  "Integer field": {
    "prefix": [
      "field",
      "integer",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Integer(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    default=12,",
      ")",
    ]
  },
  "Float field": {
    "prefix": [
      "float",
      "field",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Float(",
      "    string=\"Foo\",",
      "    digits=(10,2), # (tuple(int,int)) – a pair (total, decimal)",
      ")",
    ]
  },
  "Binary field": {
    "prefix": [
      "field",
      "binary",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Binary(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    attachment=True, # whether the field should be stored as ir_attachment or in a column of the model’s table (default: True)",
      ")",
    ]
  },
  "HTML field": {
    "prefix": [
      "field",
      "html",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Html(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    sanitize=True,",
      "    sanitize_tags=True,",
      "    sanitize_attributes=True,",
      "    sanitize_style=False,",
      "    strip_style=False,",
      "    strip_classes=False,",
      ")",
    ]
  },
  "Image field": {
    "prefix": [
      "field",
      "image",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Image(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    max_width=0,",
      "    max_height=0,",
      "    verify_resolution=True,",
      ")",
    ]
  },
  "Monetary field": {
    "prefix": [
      "field",
      "monetary",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Monetary(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    res_currency=\"currency_id\",",
      ")",
    ]
  },
  "Selection field": {
    "prefix": [
      "field",
      "selection",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Selection(",
      "    selection = [",
      "       (\"a\", \"A\"),",
      "       (\"b\", \"B\")",
      "    ]",
      "    string=\"$TM_CURRENT_WORD\",",
      "    ondelete=\"set null\" # [\"set null\", \"cascade\", \"set default\", \"set VALUE\"]",
      ")",
    ]
  },
  "Selection add field": {
    "prefix": [
      "field",
      "selection-add",
      "add",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Selection(",
      "    selection_add=[",
      "        (\"c\", \"C\"),",
      "        (\"b\", ),",
      "    ]",
      ")",
    ]
  },
  "Text field": {
    "prefix": [
      "field",
      "text",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Text(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    translate=True,",
      ")",
    ]
  },
  "Date field": {
    "prefix": [
      "date",
      "field"
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Date(",
      "    string=\"$TM_CURRENT_WORD\",",
      ")",
    ]
  },
  "Datetime field": {
    "prefix": [
      "datetime",
      "field",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Datetime(",
      "    string=\"$TM_CURRENT_WORD\",",
      ")",
    ]
  },
  "Many2one field": {
    "prefix": [
      "field",
      "many2one",
      "m2o",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Many2one(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    comodel_name=\"${0:}\",",
      "    ondelete=\"\", # [\"set null\", \"restrict\", \"cascade\"]",
      ")",
    ]
  },
  "One2many field": {
    "prefix": [
      "field",
      "one2many",
      "o2m",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.One2many(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    comodel_name=\"${0:}\",",
      "    inverse_name=\"\",",
      ")",
    ]
  },
  "Many2many field": {
    "prefix": [
      "field",
      "m2m",
      "many2many",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Many2many(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    comodel_name=\"${0:}\",",
      "    relation=\"\",",
      "    column1=\"\",",
      "    column2=\"\",",
      ")",
    ]
  },
  "Reference field": {
    "prefix": [
      "field",
      "reference",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Reference(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    default=\"res_model,res_id\" # Follow partten (\"res_model,res_id\")",
      ")",
    ]
  },
  "Odoo Many2oneReference": {
    "prefix": [
      "field",
      "m2o-reference",
      "many2onereference",
    ],
    "body": [
      "$TM_CURRENT_WORD = fields.Many2oneReference(",
      "    string=\"$TM_CURRENT_WORD\",",
      "    model_field=\"${1:}\",",
      ")",
    ]
  },
  "Related field": {
    "prefix": "oi-field-related",
    "body": [
      "$TM_CURRENT_WORD = fields.${0:Char}(",
      "    related=\"${1:partner_id.$TM_CURRENT_WORD}\",",
      "    depends=[\"${2:partner_id}\"],",
      ")",
    ]
  },
  "Reference XML ID": {
    "prefix": [
      "self",
      "ref",
    ],
    "body": [
      "$TM_CURRENT_WORD = self.env.ref(\"\",raise_if_not_found=True)",
    ],
    "description": "Return the record corresponding to the given xml_id"
  },
  "Check supper user function": {
    "prefix": [
      "self",
      "supper",
      "is"
    ],
    "body": [
      "$TM_CURRENT_WORD = self.is_superuser()",
    ],
    "description": "Return whether the environment is in superuser mode."
  },
  "Check admin user function": {
    "prefix": [
      "self",
      "admin",
      "is"
    ],
    "body": [
      "$TM_CURRENT_WORD = self.is_admin()",
    ],
    "description": "Return whether the current user has group “Access Rights”, or is in superuser mode."
  },
  "Check system user function": {
    "prefix": [
      "self",
      "system",
      "is"
    ],
    "body": [
      "$TM_CURRENT_WORD = self.is_system()",
    ],
    "description": "Return whether the current user has group “Settings”, or is in superuser mode."
  },
  "Environment change context function": {
    "prefix": [
      "self",
      "context",
      "with_context"
    ],
    "body": [
      "context = self.env.context",
      "# Update context here",
      "",
      "$TM_CURRENT_WORD = self.env[\"\"].with_context(**context)",
    ],
    "description": "Returns a new version of this recordset attached to an extended context."
  },
  "Environment change user function": {
    "prefix": [
      "self",
      "user",
      "with_user"
    ],
    "body": [
      "user = self.env.user",
      "$TM_CURRENT_WORD = self.env[\"\"].with_user(user)",
    ],
    "description": "Return a new version of this recordset attached to the given user, in non-superuser mode, unless user is the superuser (by convention, the superuser is always in superuser mode.)"
  },
  "Environment change function": {
    "prefix": [
      "self",
      "with_env",
      "env",
    ],
    "body": [
      "$TM_CURRENT_WORD = self.with_env()",
    ],
    "description": "Return a new version of this recordset attached to the provided environment."
  },
  "Odoo Sudo": {
    "prefix": [
      "sudo",
      "self",
    ],
    "body": [
      "$TM_CURRENT_WORD = self.env[\"\"].sudo()",
    ],
    "description": "Returns a new version of this recordset with superuser mode enabled or disabled, depending on flag. The superuser mode does not change the current user, and simply bypasses access rights checks."
  },
  "Flush all function": {
    "prefix": [
      "flush",
      "self",
    ],
    "body": [
      "self.flush_all()",
    ]
  },
  "Flush model function": {
    "prefix": [
      "flush model",
      "self",
    ],
    "body": [
      "self.flush_model([\"${1:field1}\",\"${2:field2}\",\"${3:field3}\"])",
    ]
  },
  "Flush recordset function": {
    "prefix": [
      "flush",
      "self",
      "flush recordset"
    ],
    "body": [
      "self.flush_recordset([\"${1:field1}\",\"${2:field2}\",\"${3:field3}\"])",
    ],
    "description": "Invalidate the cache of all records"
  },
  "Invalid all function": {
    "prefix": [
      "self",
      "invalidate",
      "invalidate_all",
    ],
    "body": [
      "self.invalidate_all(flush=${0:True})",
    ],
    "description": "Invalidate the cache of all records."
  },
  "Invalid model function": {
    "prefix": [
      "invalidate model",
      "self",
    ],
    "body": [
      "self.invalidate_model(fnames=[\"${1:field1}\",\"${2:field2}\",\"${3:field3}\"],flush=True)",
    ],
    "description": "Invalidate the cache of all records of self’s model, when the cached values no longer correspond to the database values. If the parameter is given, only the given fields are invalidated from cache."
  },
  "Invalid recordset function": {
    "prefix": [
      "invalidate recordset",
      "self",
    ],
    "body": [
      "self.invalidate_recordset(fnames=[\"${1:field1}\",\"${2:field2}\",\"${3:field3}\"],flush=True)",
    ],
    "description": "Invalidate the cache of the records in self, when the cached values no longer correspond to the database values. If the parameter is given, only the given fields on self are invalidated from cache."
  },
  "Modifier function": {
    "prefix": [
      "self",
      "modifier",
    ],
    "body": [
      "self.modified(fnames=[\"${1:field1}\",\"${2:field2}\",\"${3:field3}\"],create=False,before=False)",
    ],
    "description": "Invalidate the cache of the records in self, when the cached values no longer correspond to the database values. If the parameter is given, only the given fields on self are invalidated from cache."
  },
  "Default get function": {
    "prefix": [
      "default get",
      "def",
    ],
    "body": [
      "@api.model",
      "def default_get(self, fieldslist):",
      "    return super().default_get(fieldslist)"
    ],
    "description": "Return default values for the fields in fields_list. Default values are determined by the context, user defaults, and the model itself."
  },
  "Name create function": {
    "prefix": [
      "def",
      "name create",
    ],
    "body": [
      "@api.model",
      "def name_create(self, name):",
      "    values = {",
      "       \"name\": name",
      "}",
      "    return self.create(values).name_get()"
    ],
    "description": "Create a new record by calling create() with only one value provided: the display name of the new record."
  },
  "Browse function": {
    "prefix": [
      "browse",
      "def",
      "self",
    ],
    "body": [
      "self.env[\"\"].browse()",
    ],
    "description": "Returns a recordset for the ids provided as parameter in the current environment."
  },
  "Search function": {
    "prefix": [
      "self",
      "search",
    ],
    "body": [
      "self.env[\"\"].search(",
      "    domain=[],",
      "    offset=0,",
      "    limit=None,",
      "    order=None,",
      ")"
    ],
    "description": "This is a high-level method, which should not be overridden. Its actual implementation is done by method _search()."
  },
  "Search count function": {
    "prefix": [
      "search count",
      "self",
    ],
    "body": [
      "self.env[\"\"].search_count(",
      "    domain=[],",
      "    limit=None,",
      ")"
    ],
    "description": "This is a high-level method, which should not be overridden. Its actual implementation is done by method _search()."
  },
  "Search fetch function": {
    "prefix": [
      "self",
      "search fetch",
    ],
    "body": [
      "self.env[\"${0:model.name}\"].search_fetch(",
      "    domain=[],",
      "    fields=[\"\"],",
      "    limit=None,",
      "    order=None,",
      ")"
    ],
    "description": "Search for the records that satisfy the given domain search domain, and fetch the given fields to the cache. This method is like a combination of methods search() and fetch(), but it performs both tasks with a minimal number of SQL queries."
  },
  "Name search function": {
    "prefix": [
      "self",
      "name search",
    ],
    "body": [
      "self.env[\"\"].name_search(name=\"tuấn sad boy\", args=None, operator=\"ilike\", limit=100)",
    ],
    "description": "Search for records that have a display name matching the given name pattern when compared with the given operator, while also matching the optional search domain (args).This is used for example to provide suggestions based on a partial value for a relational field. Should usually behave as the reverse of display_name, but that is not guaranteed.This method is equivalent to calling search() with a search domain based on display_name and mapping id and display_name on the resulting search."
  },
  "Fetch function": {
    "prefix": [
      "self",
      "fetch",
    ],
    "body": [
      "self.env[\"\"].fetch(field_names=[\"${0:field1}\",\"${0:field2}\",\"${0:field3}\"])",
    ],
    "description": "Make sure the given fields are in memory for the records in self, by fetching what is necessary from the database. Non-stored fields are mostly ignored, except for their stored dependencies. This method should be called to optimize code."
  },
  "Read function": {
    "prefix": [
      "read",
      "self",
    ],
    "body": [
      "self.env[\"${0:model.name}\"].read(fields=[\"${0:field1}\",\"${0:field2}\",\"${0:field3}\"], load=None)",
    ],
    "description": "Read the requested fields for the records in self, and return their values as a list of dicts."
  },
  "Odoo Method _Read Group": {
    "prefix": "oi-method-_read-group",
    "body": [
      "self.env[\"${0:model.name}\"]._read_group(domain=[], groupby=[], aggregates=[], having=[], offset=0, limit=None, order=None)",
    ],
    "description": "Get fields aggregations specified by aggregates grouped by the given groupby fields where record are filtered by the domain."
  },
  "Odoo Method Read Group": {
    "prefix": [
      "def",
      "read_group",
    ],
    "body": [
      "@api.model",
      "def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):",
      "    return super().read_group(domain, fields, groupby, offset=offset, limit=limit, orderby=orderby, lazy=lazy)",
    ],
    "description": "Get the list of records in list view grouped by the given groupby fields."
  },
  "Fields get function": {
    "prefix": [
      "def",
      "fields_get",
    ],
    "body": [
      "@api.model",
      "def fields_get(self, allfields, attributes):",
      "    return super().fields_get(allfields,attributes)",
    ],
    "description": "Return the definition of each field."
  },
  "Ensure One": {
    "prefix": [
      "self",
      "ensure_one",
    ],
    "body": [
      "self.ensure_one()",
    ],
    "description": "Verify that the current recordset holds a single record."
  },
  "Get metadata function": {
    "prefix": [
      "self",
      "get_metadata"
    ],
    "body": [
      "self.env[\"\"].get_metadata()",
    ],
    "description": "Return some metadata about the given records."
  },
  "Filtered function": {
    "prefix": [
      "self",
      "filtered",
    ],
    "body": [
      "self.filtered(lambda r:r.id == 1)",
    ],
    "description": "Return the records in self satisfying func."
  },
  "Filter domain function": {
    "prefix": [
      "self",
      "filtered_domain",
    ],
    "body": [
      "self.filtered_domain([])",
    ],
    "description": "Return the records in self satisfying the domain and keeping the same order."
  },
  "Mapped function": {
    "prefix": [
      "self",
      "mapped"
    ],
    "body": [
      "self.mapped(\"\")",
    ],
    "description": "Apply func on all records in self, and return the result as a list or a recordset (if func return recordsets). In the latter case, the order of the returned recordset is arbitrary."
  },
  "Sorted function": {
    "prefix": [
      "self",
      "sorted",
    ],
    "body": [
      "self.sorted(key=\"${0:name}\",reverse=${1:False})",
    ],
    "description": "Return the recordset self ordered by key."
  },
  "Grouped function": {
    "prefix": [
      "self",
      "group",
    ],
    "body": [
      "self.grouped(key=\"\")",
    ],
    "description": "Eagerly groups the records of self by the key, returning a dict from the key’s result to recordsets. All the resulting recordsets are guaranteed to be part of the same prefetch-set.Provides a convenience method to partition existing recordsets without the overhead of a read_group(), but performs no aggregation."
  },
  "Required property": {
    "prefix": [
      "required"
    ],
    "body": [
      "required=True"
    ]
  },
  "Readonly property": {
    "prefix": [
      "readonly"
    ],
    "body": [
      "readonly=True"
    ]
  },
  "Compute property": {
    "prefix": [
      "compute"
    ],
    "body": [
      "compute=\"\""
    ]
  },
  "Groups property": {
    "prefix": [
      "groups"
    ],
    "body": [
      "groups=True"
    ]
  },
  "String property": {
    "prefix": [
      "string"
    ],
    "body": [
      "string=\"\""
    ]
  },
  "Index property": {
    "prefix": [
      "index"
    ],
    "body": [
      "index=\"btree\","
    ]
  },
  "Help property": {
    "prefix": [
      "help"
    ],
    "body": [
      "help=\"\","
    ]
  },
  "Default property": {
    "prefix": [
      "default"
    ],
    "body": [
      "default=\"\","
    ]
  },
  "Company dependent property": {
    "prefix": [
      "company_dependent"
    ],
    "body": [
      "company_dependent=\"True\","
    ]
  },
  "Copy property": {
    "prefix": [
      "copy"
    ],
    "body": [
      "copy=\"True\","
    ]
  },
  "Store property": {
    "prefix": [
      "store"
    ],
    "body": [
      "store=\"True\","
    ]
  },
  "Group operator property": {
    "prefix": [
      "group_operator"
    ],
    "body": [
      "group_operator=\"array_agg\", # ['array_agg','count','count_distinct','bool_and','bool_or','max','min','avg','sum']"
    ]
  },
  "Group expand property": {
    "prefix": [
      "group_expand"
    ],
    "body": [
      "group_expand=\"_read_group_${0:FUNCTION_NAME}\","
    ]
  },
  "Compute sudo property": {
    "prefix": [
      "compute_sudo"
    ],
    "body": [
      "compute_sudo=\"True\","
    ]
  },
  "Precompute property": {
    "prefix": [
      "precompute"
    ],
    "body": [
      "precompute=\"True\","
    ]
  },
  "Recursive property": {
    "prefix": [
      "recursive"
    ],
    "body": [
      "recursive=\"True\","
    ]
  },
  "Inverse property": {
    "prefix": [
      "inverse"
    ],
    "body": [
      "inverse=\"_inverse_${0:METHOD_NAME}\","
    ]
  },
  "Search property": {
    "prefix": [
      "search"
    ],
    "body": [
      "search=\"_search_${0:METHOD_NAME}\","
    ]
  },
}